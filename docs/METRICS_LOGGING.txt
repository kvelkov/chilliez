# Metrics Logging with `metrics-exporter-statsd`

## Overview

This project now uses the [`metrics-exporter-statsd`](https://crates.io/crates/metrics-exporter-statsd) backend for metrics collection and export. This approach is:

- **Reliable**: Uses the StatsD protocol, compatible with many monitoring tools
- **Fast**: Minimal overhead, UDP-based
- **Resource-light**: No heavy server required, works with any StatsD-compatible collector

## How It Works

- Metrics macros (`counter!`, `gauge!`, `histogram!`) are used throughout the codebase.
- Metrics are sent over UDP to a local or remote StatsD server (default: `127.0.0.1:8125`).
- You can view metrics using a StatsD exporter, Datadog agent, or similar tool.

## Setup

1. Add to `Cargo.toml`:

   ```toml
   [dependencies]
   metrics = "0.22"
   metrics-exporter-statsd = "0.7"
   ```

2. Initialize in `main.rs`:

   ```rust
   let recorder = metrics_exporter_statsd::StatsdBuilder::from("127.0.0.1", 8125)
       .build(None)
       .expect("failed to build StatsD recorder");
   metrics::set_global_recorder(recorder).expect("failed to set global metrics recorder");
   ```

3. Use metrics macros as usual:

   ```rust
   use metrics::{counter, gauge, histogram};
   counter!("my_counter", 1);
   ```

## Viewing Metrics

- Run a StatsD-compatible server (e.g., [statsd_exporter](https://github.com/prometheus/statsd_exporter), Datadog agent, etc.) on `127.0.0.1:8125`.
- Run your application and view metrics in your StatsD backend or export to Prometheus/Grafana.

## Current State

- All Prometheus and log-based exporters have been removed.
- `metrics-exporter-statsd` is initialized in `main.rs` and is the only active exporter.
- The codebase builds and runs with no warnings.
- Metrics macros are available for use throughout the codebase.

## Next Steps

- [ ] Uncomment and use `counter!`, `gauge!`, and `histogram!` macros in business logic where metrics are needed.
- [ ] Deploy or run a StatsD-compatible server locally or remotely to collect and visualize metrics.
- [ ] Optionally, add dashboards or alerting in your monitoring stack (Grafana, Datadog, etc.).
- [ ] Update documentation and code comments as new metrics are added or requirements change.
