# Paper Trading Mode üìÑ

## Overview

The paper trading mode allows you to test arbitrage strategies with virtual money in a real market environment. This is essential for:

- Testing strategies without risking real funds
- Validating bot performance before going live
- Analyzing potential profitability and risk
- Learning how the system works

## Features

### üéØ Virtual Portfolio Management
- Simulated balances for multiple tokens
- Realistic trade execution with slippage
- Fee simulation and tracking
- Balance updates and validation

### üìä Comprehensive Analytics
- Trade success/failure rates
- Profit and loss tracking
- Performance metrics (Sharpe ratio, max drawdown)
- Execution time analysis
- DEX-specific performance breakdown

### üìù Detailed Logging
- JSONL trade logs with full details
- CSV export capabilities
- JSON analytics export
- Console performance summaries

### üîß Realistic Simulation
- Configurable slippage simulation
- Random execution delays
- Failure probability simulation
- Fee calculations

## Usage

### CLI Commands

```bash
# Enable paper trading mode
./solana-arb-bot --paper-trading

# Enable real trading mode  
./solana-arb-bot --real-trading

# Specify custom log directory
./solana-arb-bot --paper-trading --paper-logs-dir ./my_paper_logs
```

### Environment Variables

```bash
# Enable/disable paper trading via environment
export PAPER_TRADING=true

# Other relevant settings
export MIN_PROFIT_PCT=0.001          # 0.1% minimum profit
export MAX_SLIPPAGE_PCT=0.01         # 1% max slippage
export RPC_URL="https://api.mainnet-beta.solana.com"
export WS_URL="wss://api.mainnet-beta.solana.com"
```

## Configuration

### Initial Virtual Balances

By default, paper trading starts with:
- 1 SOL (1,000,000,000 lamports)
- 10,000 USDC equivalent

You can customize these in the `PaperTradingConfig`:

```rust
let mut initial_balances = HashMap::new();
initial_balances.insert(sol_mint, 5_000_000_000); // 5 SOL
initial_balances.insert(usdc_mint, 50_000_000_000); // 50,000 USDC
```

### Simulation Parameters

```rust
pub struct PaperTradingConfig {
    pub initial_balances: HashMap<Pubkey, u64>,
    pub max_slippage_bps: u16,              // 100 = 1%
    pub simulated_tx_fee: u64,              // 5000 lamports
    pub failure_probability: f64,           // 0.05 = 5% chance
    pub enable_slippage_simulation: bool,   // true
    pub min_execution_time_ms: u64,         // 50ms
    pub max_execution_time_ms: u64,         // 200ms
}
```

## Output Files

### Trade Logs (`paper_trades_*.jsonl`)

Each line contains a complete trade record:

```json
{
  "timestamp": "2025-06-14T10:30:00Z",
  "opportunity_id": "arb_1718364600000",
  "token_in": "SOL",
  "token_out": "USDC", 
  "amount_in": 1000000000,
  "amount_out": 150000000,
  "expected_profit": 5000000,
  "actual_profit": 4800000,
  "slippage_applied": 0.02,
  "fees_paid": 5000,
  "execution_success": true,
  "dex_route": ["Pool_ABC123", "Pool_DEF456"],
  "gas_cost": 5000
}
```

### Analytics (`paper_analytics_*.json`)

Complete performance summary:

```json
{
  "session_start": "2025-06-14T10:00:00Z",
  "session_end": "2025-06-14T11:00:00Z",
  "total_trades": 150,
  "successful_trades": 142,
  "failed_trades": 8,
  "success_rate": 94.67,
  "total_profit_loss": 45000000,
  "average_profit_per_trade": 316901.41,
  "largest_win": 12000000,
  "largest_loss": -2000000,
  "sharpe_ratio": 2.34,
  "max_drawdown": 5.2,
  "return_percentage": 4.5
}
```

## Testing

### Quick Test

```bash
# Run the provided test script
./test_paper_trading.sh
```

### Manual Testing

```bash
# Start in paper trading mode
cargo run --release -- --paper-trading

# In another terminal, monitor logs
tail -f ./paper_trading_logs/paper_trades_*.jsonl

# Check performance
cat ./paper_trading_logs/paper_analytics_*.json | jq .
```

## Integration

### Adding to Your Bot

1. **Enable in Configuration**:
```rust
let config = Config::from_env();
// config.paper_trading is set via CLI or env vars
```

2. **Initialize Components**:
```rust
let orchestrator = ArbitrageOrchestrator::new(
    // ... other params
);
// Paper trading components are automatically initialized if enabled
```

3. **Execution Routing**:
```rust
// The orchestrator automatically routes to paper trading when enabled
let results = orchestrator.execute_opportunities(opportunities).await?;
```

## Benefits

### Risk-Free Testing ‚úÖ
- No real money at risk
- Test with realistic market conditions
- Validate strategies before live trading

### Performance Analysis üìä
- Detailed metrics and analytics
- Historical performance tracking
- Strategy optimization insights

### Education & Development üéì
- Learn arbitrage mechanics
- Understand market dynamics
- Debug and improve algorithms

### Compliance & Validation üìã
- Demonstrate strategy effectiveness
- Generate performance reports
- Satisfy testing requirements

## Best Practices

### 1. Realistic Initial Balances
Set initial balances that reflect your intended live trading capital.

### 2. Monitor Slippage
Pay attention to slippage simulation as it significantly impacts real profits.

### 3. Analyze Failure Rates
High failure rates in paper trading indicate potential issues with real execution.

### 4. Consider Network Conditions
Paper trading simulates ideal conditions - real trading has network delays and congestion.

### 5. Regular Analytics Review
Regularly export and analyze performance data to optimize strategies.

## Troubleshooting

### No Opportunities Found
- Check RPC connectivity
- Verify pool discovery is working
- Lower profit thresholds for testing

### High Failure Rates
- Increase max slippage tolerance
- Check balance sufficiency
- Review failure reasons in logs

### Performance Issues
- Monitor execution times
- Check memory usage during long runs
- Review log file sizes

## Next Steps

After successful paper trading:

1. **Analyze Results**: Review all generated analytics
2. **Optimize Parameters**: Adjust based on performance data  
3. **Gradual Transition**: Start with small real amounts
4. **Monitor Closely**: Compare real vs paper performance
5. **Iterate**: Continuously improve based on results

---

**‚ö†Ô∏è Important**: Paper trading results don't guarantee real trading success. Always start with small amounts and gradually scale up.
